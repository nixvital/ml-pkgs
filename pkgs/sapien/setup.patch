diff --git a/setup.py b/setup.py
index ea7be280..4a2cc0ed 100644
--- a/setup.py
+++ b/setup.py
@@ -111,7 +111,7 @@ if args.get_version:
 
 def build_sapien(sapien_source_dir, sapien_build_dir):
     build_dir = os.path.join(sapien_build_dir, "_sapien_build")
-    install_dir = os.path.join(sapien_build_dir, "_sapien_install")
+    install_dir = os.environ["out"]
     os.makedirs(build_dir, exist_ok=True)
     os.makedirs(install_dir, exist_ok=True)
 
@@ -193,7 +193,7 @@ class CMakeBuild(build_ext):
             self.build_extension(ext)
 
     def build_pinocchio(self, ext):
-        sapien_install_dir = os.path.join(self.sapien_build_dir, "_sapien_install")
+        sapien_install_dir = os.environ["out"]
         build_dir = os.path.join(self.sapien_build_dir, "_pinocchio_build")
         os.makedirs(build_dir, exist_ok=True)
         original_full_path = self.get_ext_fullpath(ext.name)
@@ -215,7 +215,8 @@ class CMakeBuild(build_ext):
         build_args = ["--config", cfg]
         cmake_args += ["-DCMAKE_BUILD_TYPE=" + cfg]
         cmake_args += [
-            "-Dsapien_DIR=" + os.path.join(sapien_install_dir, "lib/cmake/sapien")
+            "-Dsapien_DIR=" + os.path.join(sapien_install_dir, "lib/cmake/sapien"),
+            f"-DCMAKE_INSTALL_PREFIX={sapien_install_dir}",
         ]
         env = os.environ.copy()
         subprocess.check_call(
@@ -229,7 +230,7 @@ class CMakeBuild(build_ext):
         )
 
     def build_pybind(self, ext):
-        sapien_install_dir = os.path.join(self.sapien_build_dir, "_sapien_install")
+        sapien_install_dir = os.environ["out"]
 
         os.makedirs(self.build_temp, exist_ok=True)
         original_full_path = self.get_ext_fullpath(ext.name)
@@ -247,7 +248,8 @@ class CMakeBuild(build_ext):
         build_args = ["--config", cfg]
         cmake_args += ["-DCMAKE_BUILD_TYPE=" + cfg]
         cmake_args += [
-            "-Dsapien_DIR=" + os.path.join(sapien_install_dir, "lib/cmake/sapien")
+            "-Dsapien_DIR=" + os.path.join(sapien_install_dir, "lib/cmake/sapien"),
+            f"-DCMAKE_INSTALL_PREFIX={sapien_install_dir}",
         ]
         env = os.environ.copy()
         subprocess.check_call(
@@ -266,31 +268,31 @@ class CMakeBuild(build_ext):
             shutil.rmtree(include_path)
         shutil.copytree(source_include_path, include_path)
 
-        if platform.system() == "Windows":
-            bindir = os.path.join(sapien_install_dir, "bin")
-            for f in os.listdir(bindir):
-                if f.endswith("dll"):
-                    shutil.copy(os.path.join(bindir, f), extdir)
-
-        oidn_library_path = os.path.join(extdir, "oidn_library")
-        if os.path.exists(oidn_library_path):
-            shutil.rmtree(oidn_library_path)
-        os.makedirs(oidn_library_path, exist_ok=True)
-
-        # provide oidn for linux
-        if platform.system() == "Linux":
-            for folder in ["lib", "lib64"]:
-                library_dir = os.path.join(sapien_install_dir, folder)
-                if not os.path.exists(library_dir):
-                    continue
-                print("copy library from", library_dir)
-                for lib in os.listdir(library_dir):
-                    if lib in [
-                        "libOpenImageDenoise.so.2.0.1",
-                        "libOpenImageDenoise_core.so.2.0.1",
-                        "libOpenImageDenoise_device_cuda.so.2.0.1",
-                    ]:
-                        shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
+        # if platform.system() == "Windows":
+        #     bindir = os.path.join(sapien_install_dir, "bin")
+        #     for f in os.listdir(bindir):
+        #         if f.endswith("dll"):
+        #             shutil.copy(os.path.join(bindir, f), extdir)
+
+        # oidn_library_path = os.path.join(extdir, "oidn_library")
+        # if os.path.exists(oidn_library_path):
+        #     shutil.rmtree(oidn_library_path)
+        # os.makedirs(oidn_library_path, exist_ok=True)
+
+        # # provide oidn for linux
+        # if platform.system() == "Linux":
+        #     for folder in ["lib", "lib64"]:
+        #         library_dir = os.path.join(sapien_install_dir, folder)
+        #         if not os.path.exists(library_dir):
+        #             continue
+        #         print("copy library from", library_dir)
+        #         for lib in os.listdir(library_dir):
+        #             if lib in [
+        #                 "libOpenImageDenoise.so.2.0.1",
+        #                 "libOpenImageDenoise_core.so.2.0.1",
+        #                 "libOpenImageDenoise_device_cuda.so.2.0.1",
+        #             ]:
+        #                 shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
 
     def copy_assets(self, ext):
         vulkan_shader_path = os.path.join(self.build_lib, "sapien", "vulkan_shader")
