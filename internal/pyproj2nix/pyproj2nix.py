import re
import tomllib
import httpx
import click
from jinja2 import Template


NIX_TEMPLATE = r"""
# This file is modified from a draft generated by the following command
# nix run .#pyproj2nix {{ uri }}

{ lib
, buildPythonPackage
, fetchFromGitHub
{%- for arg in func_args %}
, {{ arg -}}
{% endfor %}
}:

let
  pname = "{{ pname }}";
  version = "{{ version }}";

in buildPythonPackage {
  inherit pname version;
  pyproject = true;

  src = fetchFromGitHub {
    owner = "{{ github_owner }}";
    repo = "{{ github_repo }}";
    rev = version;
    hash = null;
  };

  build-system = [
    {%- for item in build_system %}
    {{ item -}}
    {% endfor %}
  ];

  dependencies = [
    {%- for dep in dependencies %}
    {{ dep -}}
    {% endfor %}
  ];

  optional-dependencies = {
    {%- for k, deps in optional_deps.items() %}
    {{ k }} = [
      {%- for dep in deps %}
      {{ dep -}}
      {% endfor %}
    ];
    {%- endfor %}
  };

  pythonImportsCheck = [ "{{ pname }}" ];

  meta = with lib; {
    homepage = "{{ homepage }}";
    description = "{{ description }}";
    license = ?;
    maintainers = with maintainers; [ breakds ];
  };
}

"""


NIX_PKG_NAME_MAPPING = {
    "IPython": "ipython",
    "opencv-python": "opencv4",
    "typing_extensions": "typing-extensions",
    "hf_transfer": "hf-transfer",
    "python-multipart": "multipart",
    "huggingface_hub": "huggingface-hub",
    "sentence_transformers": "sentence-transformers",
}


def to_nix_pkg_name(dep: str):
    m = re.match(r"^\s*([A-Za-z0-9_.-]+)", dep)
    if m:
        x = m.group(1)
    else:
        x = dep.strip()
    return NIX_PKG_NAME_MAPPING.get(x, x)


@click.command
@click.argument("uri")
def main(uri: str):
    """Generate a default.nix file from a pyproject.toml file.

    """
    input_uri = uri
    github_owner = "?"
    github_repo = "?"

    # TODO: Currently this only handles local path. Should make it work even if
    # the input is an URL
    if uri.startswith("http"):
        if "github.com" in uri and "/blob/" in uri:
            # Identify the owner and repo when the input is a github URL.
            m = re.match(r"https://github.com/([^/]*)/([^/]*)/.*", uri)
            if m is not None:
                github_owner = m.group(1)
                github_repo = m.group(2)
            uri = uri.replace("github.com", "raw.githubusercontent.com")
            uri = uri.replace("/blob/", "/")
        try:
            response = httpx.get(uri)
            response.raise_for_status()
            data = tomllib.loads(response.content.decode("utf-8"))
        except Exception as e:
            click.echo(f"Error fetching from URL {uri}: {e}")
            return
    else:
        try:
            with open(uri, "rb") as f:
                data = tomllib.load(f)
        except Exception as e:
            click.echo(f"Error reading from {uri}: {e}")
            return

    project = data.get("project") or data.get("tool", {}).get("poetry")

    nix_func_args = set()

    # ┌─────────────────────────────────────────┐
    # │ Figure out the build-system             │
    # └─────────────────────────────────────────┘

    build_backend = data.get("build-system").get("build-backend")
    build_system = {
        "setuptools.build_meta": ["setuptools"],
        "pdm.backend": ["pdm-backend"]
    }[build_backend]

    for item in build_system:
        nix_func_args.add(item)

    # ┌─────────────────────────────────────────┐
    # │ Figure out the dependencies             │
    # └─────────────────────────────────────────┘

    dependencies = list(map(to_nix_pkg_name,
                            project.get("dependencies", [])))

    for item in dependencies:
        nix_func_args.add(item)

    # ┌─────────────────────────────────────────┐
    # │ Figure out the optional dependencies    │
    # └─────────────────────────────────────────┘

    optional_deps = {}
    for k, deps in project.get("optional-dependencies", {}).items():
        optional_deps[k] = list(set(map(to_nix_pkg_name, deps)))
        for item in optional_deps[k]:
            nix_func_args.add(item)

    # ┌─────────────────────────────────────────┐
    # │ Identify the homepage                   │
    # └─────────────────────────────────────────┘

    if "urls" in project:
        homepage = project.get("urls").get("Homepage", "?")
    else:
        homepage = "?"

    # ┌─────────────────────────────────────────┐
    # │ Generate nix file based on the template │
    # └─────────────────────────────────────────┘

    template = Template(NIX_TEMPLATE)
    nix_file_content = template.render(
        pname=project.get("name", "<BLANK>"),
        version=project.get("version", "<BLANK>"),
        description=project.get("description", ""),
        dependencies=dependencies,
        optional_deps=optional_deps,
        build_system=build_system,
        func_args=list(nix_func_args),
        homepage=homepage,
        github_owner=github_owner,
        github_repo=github_repo,
        uri=input_uri)

    print(nix_file_content)


if __name__ == "__main__":
    main()
