diff --git a/CMakeLists.txt b/CMakeLists.txt
index c7431fe..ea66188 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required(VERSION 3.24 FATAL_ERROR)
-project(sapienvulkan2 LANGUAGES C CXX)
+project(sapienvulkan2 LANGUAGES C CXX CUDA)
 set(CMAKE_CXX_STANDARD 20)
 
 option(SVULKAN2_SHARED "Force svulkan2 to be shared" ON)
@@ -20,17 +20,30 @@ add_compile_definitions("$<$<CONFIG:DEBUG>:VK_VALIDATION>")
 add_compile_definitions("$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
 
 list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
-include(glm)
-include(assimp)
-include(spdlog)
-include(glfw)
-include(ktx)
-include(vulkan)
-include(glslang)
-include(spirv-cross)
 include(imgui)
-include(openexr)
-include(openvr)
+
+find_package(glm REQUIRED)
+find_package(assimp REQUIRED)
+find_package(spdlog REQUIRED)
+find_package(glfw3 REQUIRED)
+find_package(Ktx REQUIRED)
+find_package(VulkanHeaders REQUIRED)
+find_package(glslang REQUIRED)
+find_package(SPIRV-Tools REQUIRED)
+find_package(spirv_cross_core REQUIRED)
+find_package(spirv_cross_glsl REQUIRED)
+find_package(spirv_cross_cpp REQUIRED)
+find_package(OpenEXR REQUIRED)
+
+find_package(PkgConfig REQUIRED)
+
+pkg_check_modules(OPENVR REQUIRED openvr)
+include_directories(${OPENVR_INCLUDE_DIRS})
+link_directories(${OPENVR_LIBRARY_DIRS})
+
+pkg_check_modules(CUDART REQUIRED cudart)
+include_directories(${CUDART_INCLUDE_DIRS})
+link_directories(${CUDART_LIBRARY_DIRS})
 
 file(GLOB_RECURSE SVULKAN2_SRC "src/*.cpp")
 
@@ -54,14 +67,21 @@ target_include_directories(svulkan2 PRIVATE
     "3rd_party/stb" "3rd_party/OptiX7SDK/include"
     "3rd_party/tinygltf"
 )
-target_link_libraries(svulkan2 PUBLIC Vulkan::Headers glm)
+target_link_libraries(svulkan2 PUBLIC
+    Vulkan::Headers glm::glm
+)
 
 find_package(Threads REQUIRED)
-target_link_libraries(svulkan2 PRIVATE assimp::assimp glslang SPIRV spirv-cross-cpp glfw spdlog::spdlog ktx imgui ${CMAKE_DL_LIBS} Threads::Threads OpenEXR)
+target_link_libraries(svulkan2 PRIVATE
+    assimp::assimp glslang::glslang glslang::SPIRV
+    spirv-cross-cpp glfw spdlog::spdlog KTX::ktx
+    imgui ${CMAKE_DL_LIBS} Threads::Threads
+    OpenEXR ${CUDART_LIBRARIES}
+)
 if (MSVC)
     target_link_libraries(svulkan2 PRIVATE openvr_api64)
 else()
-    target_link_libraries(svulkan2 PRIVATE openvr_api)
+    target_link_libraries(svulkan2 PRIVATE ${OPENVR_LIBRARIES})
 endif()
 
 if (${SVULKAN2_PROFILE})
@@ -72,16 +92,12 @@ endif()
 
 
 if (${SVULKAN2_CUDA_INTEROP})
-    find_package(CUDA REQUIRED)
     target_compile_definitions(svulkan2 PUBLIC SVULKAN2_CUDA_INTEROP)
     target_include_directories(svulkan2 PRIVATE "$ENV{CUDA_PATH}/include")
     if (MSVC)
         target_link_libraries(svulkan2 PRIVATE "$ENV{CUDA_PATH}/lib/x64/cudart_static.lib")
-    else()
-        target_link_libraries(svulkan2 PRIVATE "$ENV{CUDA_PATH}/lib64/libcudart_static.a" rt)
     endif()
 
-    include(oidn)
     target_link_libraries(svulkan2 PRIVATE OpenImageDenoise)
 endif()
 
@@ -92,13 +108,13 @@ target_compile_definitions(svulkan2 PRIVATE VULKAN_HPP_STORAGE_SHARED_EXPORT)
 target_compile_definitions(svulkan2 PUBLIC VULKAN_HPP_STORAGE_SHARED)
 
 if (${SVULKAN2_CUDA_INTEROP})
-    install(TARGETS svulkan2 Vulkan-Headers glm OpenImageDenoise OpenImageDenoise_core OpenImageDenoise_common
+    install(TARGETS svulkan2
         EXPORT svulkan2Targets
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib
     )
 else ()
-    install(TARGETS svulkan2 Vulkan-Headers glm
+    install(TARGETS svulkan2
         EXPORT svulkan2Targets
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib
@@ -106,14 +122,11 @@ else ()
 endif ()
 
 install(EXPORT svulkan2Targets
-    FILE svulkan2.cmake
+    FILE svulkan2Config.cmake
     NAMESPACE svulkan2::
     DESTINATION lib/cmake/svulkan2
 )
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/svulkan2 DESTINATION "include")
-install(DIRECTORY "${vulkan_SOURCE_DIR}/include/vulkan" DESTINATION "include")
-install(DIRECTORY "${vulkan_SOURCE_DIR}/include/vk_video" DESTINATION "include")
-install(DIRECTORY "${glm_SOURCE_DIR}/glm" DESTINATION "include")
 
 add_executable(svulkan2_main app/main.cpp)
 target_link_libraries(svulkan2_main svulkan2 glfw imgui)
